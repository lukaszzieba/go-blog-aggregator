// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds_follow.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH insert_feed_follow AS (
    INSERT INTO feed_follows ( created_at, updated_at, user_id, feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4
    )
    RETURNING id, created_at, updated_at, user_id, feed_id, last_fetched_at
)

SELECT  
    i.id,
    i.created_at,
    i.updated_at,
    u.name AS user_name,
    f.name AS feed_name
FROM insert_feed_follow i 
LEFT JOIN feeds f ON f.id = i.feed_id
LEFT JOIN users u ON u.id = i.user_id
`

type CreateFeedFollowParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  sql.NullString
	FeedName  sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows where user_id = $1 AND feed_id = $2
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const getFeedsForUser = `-- name: GetFeedsForUser :many
SELECT  
    f.name AS feed_name
FROM feed_follows ff 
LEFT JOIN feeds f ON f.id = ff.feed_id
WHERE ff.user_id = $1
`

func (q *Queries) GetFeedsForUser(ctx context.Context, userID uuid.UUID) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var feed_name sql.NullString
		if err := rows.Scan(&feed_name); err != nil {
			return nil, err
		}
		items = append(items, feed_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
select f.id, f.url, ff.last_fetched_at from feed_follows ff join feeds f on ff.feed_id = f.id order by ff.last_fetched_at asc nulls first limit 1
`

type GetNextFeedToFetchRow struct {
	ID            uuid.UUID
	Url           string
	LastFetchedAt sql.NullTime
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GetNextFeedToFetchRow
	err := row.Scan(&i.ID, &i.Url, &i.LastFetchedAt)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feed_follows SET last_fetched_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
